/**
 * Comprehensive Penetration Testing Suite for Discord Gambling Bot
 * Tests every possible way the bot could break or be exploited
 */

const crypto = require('crypto');

// Mock Discord interaction object
class MockInteraction {
    constructor(userId = '123456789', type = 'slash', customId = null) {
        this.id = crypto.randomUUID();
        this.user = { id: userId, username: `testuser_${userId}` };
        this.type = type; // 'slash' or 'button'
        this.customId = customId;
        this.replied = false;
        this.deferred = false;
        this.channel = {
            createMessageCollector: () => ({
                on: () => {},
                end: () => {}
            })
        };
    }
    
    async reply(options) {
        this.replied = true;
        console.log(`[REPLY] ${this.user.username}: ${JSON.stringify(options, null, 2)}`);
    }
    
    async deferUpdate() {
        this.deferred = true;
        console.log(`[DEFER] ${this.user.username}`);
    }
    
    async editReply(options) {
        console.log(`[EDIT] ${this.user.username}: ${JSON.stringify(options, null, 2)}`);
    }
    
    async followUp(options) {
        console.log(`[FOLLOWUP] ${this.user.username}: ${JSON.stringify(options, null, 2)}`);
    }
    
    async update(options) {
        console.log(`[UPDATE] ${this.user.username}: ${JSON.stringify(options, null, 2)}`);
    }
    
    isButton() {
        return this.type === 'button';
    }
}

// Test Input Validation Edge Cases
async function testInputValidation() {
    console.log('\n🔥 TESTING INPUT VALIDATION EDGE CASES');
    
    const { parseFormattedNumber } = require('./games/towers');
    const maliciousInputs = [
        // Extreme values
        'Infinity', '-Infinity', 'NaN', '1e308', '-1e308',
        // Negatives  
        '-1000', '-999999999999999999999',
        // Special characters and injections
        '"; DROP TABLE users; --', '<script>alert(1)</script>',
        '\x00\x01\x02', '💰💰💰💰', '1000\n\n\n\n\n',
        // Unicode attacks
        '\u202e1000', '\u200b1000', '\u2028\u2029',
        // Huge magnitudes
        '999999999999999999999999999999999999999999k',
        '999999999999999999999999999999999999999999m',
        '999999999999999999999999999999999999999999b',
        // Zero-width and invisible chars
        '\u200b1000\u200c', '\u2060\u2061\u2062\u2063',
        // Floating point edge cases
        '0.1', '0.9999999999999999999999', '1.7976931348623157e+308',
        // Empty and whitespace
        '', '   ', '\t\n\r', '\x00',
        // Scientific notation
        '1e10', '1E10', '1.5e+6', '1.5E-6',
        // Multiple decimal points
        '1.2.3.4', '1,2,3,4,5,6,7,8,9',
        // Buffer overflow attempts
        'A'.repeat(10000) + '1000',
        '1'.repeat(1000000),
    ];
    
    for (const input of maliciousInputs) {
        try {
            const result = parseFormattedNumber(input);
            console.log(`⚠️  INPUT: "${input}" => ${result} (expected rejection)`);
        } catch (error) {
            console.log(`✅ INPUT: "${input}" => REJECTED: ${error.message}`);
        }
    }
}

// Test Concurrency and Race Conditions
async function testConcurrencyAttacks() {
    console.log('\n🔥 TESTING CONCURRENCY & RACE CONDITIONS');
    
    const towers = require('./games/towers');
    const userId = 'race_test_user';
    
    // Rapid-fire button clicks (double-spend attempt)
    console.log('Testing rapid button clicks...');
    const interactions = [];
    for (let i = 0; i < 50; i++) {
        interactions.push(new MockInteraction(userId, 'button', 'towers_cashout'));
    }
    
    // Fire all simultaneously
    await Promise.allSettled(
        interactions.map(interaction => towers.handleButton(interaction, ['cashout']))
    );
    
    // Test concurrent game starts
    console.log('Testing concurrent game starts...');
    const gameStarts = [];
    for (let i = 0; i < 20; i++) {
        gameStarts.push(new MockInteraction(userId, 'slash'));
    }
    
    await Promise.allSettled(
        gameStarts.map(interaction => towers.handleButton(interaction, ['start']))
    );
    
    // Test multiple users hitting same endpoints
    console.log('Testing multi-user concurrent access...');
    const multiUserTests = [];
    for (let userId = 0; userId < 100; userId++) {
        const interaction = new MockInteraction(`user_${userId}`, 'slash');
        multiUserTests.push(towers.handleButton(interaction, ['start']));
    }
    
    await Promise.allSettled(multiUserTests);
}

// Test Game Logic Exploitation Attempts
async function testGameExploits() {
    console.log('\n🔥 TESTING GAME LOGIC EXPLOITS');
    
    const { generateSeed, getRandomFromSeed } = require('./utils/provablyFair');
    
    // Test seed predictability
    console.log('Testing seed predictability...');
    const seeds = [];
    for (let i = 0; i < 100; i++) {
        seeds.push(generateSeed());
    }
    
    // Check for patterns in seeds
    const clientSeeds = seeds.map(s => s.clientSeed);
    const serverSeeds = seeds.map(s => s.serverSeed);
    const nonces = seeds.map(s => s.nonce);
    
    console.log('Client seed entropy check:', new Set(clientSeeds).size === clientSeeds.length);
    console.log('Server seed entropy check:', new Set(serverSeeds).size === serverSeeds.length);
    console.log('Nonce patterns:', nonces.slice(0, 10));
    
    // Test towers game exploits
    const towers = require('./games/towers');
    
    // Attempt negative bet
    console.log('Testing negative bet amounts...');
    const negBetInteraction = new MockInteraction('exploit_user', 'button', 'towers_bet_-999999');
    await towers.handleButton(negBetInteraction, ['bet', '-999999']);
    
    // Attempt zero bet
    const zeroBetInteraction = new MockInteraction('exploit_user', 'button', 'towers_bet_0');
    await towers.handleButton(zeroBetInteraction, ['bet', '0']);
    
    // Attempt to revive ended game
    console.log('Testing game revival attempts...');
    const reviveInteraction = new MockInteraction('exploit_user', 'button', 'towers_tile_0_0');
    await towers.handleButton(reviveInteraction, ['tile', '0', '0']);
}

// Test Database Integrity Under Stress
async function testDatabaseIntegrity() {
    console.log('\n🔥 TESTING DATABASE INTEGRITY');
    
    const { getUserBalance, updateUserBalance } = require('./utils/database');
    const testUserId = 'db_stress_test';
    
    // Concurrent balance updates (race condition test)
    console.log('Testing concurrent balance updates...');
    const concurrentUpdates = [];
    for (let i = 0; i < 100; i++) {
        concurrentUpdates.push(updateUserBalance(testUserId, 10000 + i));
    }
    
    await Promise.allSettled(concurrentUpdates);
    
    // Check final balance consistency
    const finalBalance = await getUserBalance(testUserId);
    console.log(`Final balance after concurrent updates: ${finalBalance}`);
    
    // Test extremely large numbers
    console.log('Testing extreme balance values...');
    try {
        await updateUserBalance(testUserId, Number.MAX_SAFE_INTEGER);
        await updateUserBalance(testUserId, -Number.MAX_SAFE_INTEGER);
        await updateUserBalance(testUserId, Infinity);
        await updateUserBalance(testUserId, -Infinity);
        await updateUserBalance(testUserId, NaN);
    } catch (error) {
        console.log('Database properly rejected extreme values:', error.message);
    }
}

// Test Button Interaction Edge Cases
async function testButtonEdgeCases() {
    console.log('\n🔥 TESTING BUTTON INTERACTION EDGE CASES');
    
    const towers = require('./games/towers');
    
    // Malformed custom IDs
    const malformedButtons = [
        '', 'invalid', 'towers', 'towers_', 'towers_invalid_action',
        'TOWERS_BET_1000', 'towers_bet_', 'towers_bet_abc',
        'other_game_towers_bet_1000', 'towers_bet_1000_extra_params',
        '\x00towers_bet_1000', 'towers_bet_1000\x00',
        'towers_' + 'A'.repeat(1000),
        'towers_bet_💰💰💰',
    ];
    
    for (const customId of malformedButtons) {
        try {
            const interaction = new MockInteraction('malformed_test', 'button', customId);
            // Parse button like the main handler does
            const parts = customId.split('_');
            const game = parts[0];
            const action = parts[1];
            const params = parts.slice(2);
            
            if (game === 'towers') {
                await towers.handleButton(interaction, [action, ...params]);
            }
            console.log(`⚠️  MALFORMED BUTTON: "${customId}" => PROCESSED (should be rejected)`);
        } catch (error) {
            console.log(`✅ MALFORMED BUTTON: "${customId}" => REJECTED: ${error.message}`);
        }
    }
    
    // Stale/disabled button interactions
    console.log('Testing stale button interactions...');
    const staleInteraction = new MockInteraction('stale_test', 'button', 'towers_tile_5_5');
    await towers.handleButton(staleInteraction, ['tile', '5', '5']);
    
    // Out-of-bounds tile selections
    const oobInteractions = [
        ['tile', '-1', '0'], ['tile', '0', '-1'],
        ['tile', '999', '0'], ['tile', '0', '999'],
        ['tile', 'NaN', '0'], ['tile', '0', 'undefined'],
    ];
    
    for (const params of oobInteractions) {
        try {
            const interaction = new MockInteraction('oob_test', 'button', `towers_${params.join('_')}`);
            await towers.handleButton(interaction, params);
            console.log(`⚠️  OOB TILE: ${params} => PROCESSED (should be rejected)`);
        } catch (error) {
            console.log(`✅ OOB TILE: ${params} => REJECTED: ${error.message}`);
        }
    }
}

// Test Admin Command Security
async function testAdminSecurity() {
    console.log('\n🔥 TESTING ADMIN COMMAND SECURITY');
    
    // Test permission bypass attempts
    const nonAdminUser = '999999999999999999'; // Not the owner
    const adminCommands = require('./commands/admin');
    
    // Attempt admin commands as non-admin
    const maliciousAdminAttempts = [
        { command: 'setbalance', options: [{ name: 'user', value: '<@123456789>' }, { name: 'amount', value: '999999999' }] },
        { command: 'give', options: [{ name: 'user', value: '<@123456789>' }, { name: 'amount', value: '999999999' }] },
    ];
    
    for (const attempt of maliciousAdminAttempts) {
        try {
            const interaction = new MockInteraction(nonAdminUser, 'slash');
            interaction.options = {
                getSubcommand: () => attempt.command,
                getString: (name) => attempt.options.find(opt => opt.name === name)?.value || null,
                getUser: (name) => ({ id: '123456789', username: 'victim' })
            };
            
            await adminCommands.execute(interaction);
            console.log(`⚠️  ADMIN BYPASS: ${attempt.command} => EXECUTED (SECURITY BREACH!)`);
        } catch (error) {
            console.log(`✅ ADMIN SECURITY: ${attempt.command} => BLOCKED: ${error.message}`);
        }
    }
}

// Memory and Resource Testing
async function testResourceExhaustion() {
    console.log('\n🔥 TESTING RESOURCE EXHAUSTION');
    
    const initialMemory = process.memoryUsage();
    console.log('Initial memory usage:', initialMemory);
    
    // Create massive number of game states
    const towers = require('./games/towers');
    const massiveUserLoad = [];
    
    for (let i = 0; i < 10000; i++) {
        const interaction = new MockInteraction(`stress_user_${i}`, 'slash');
        massiveUserLoad.push(towers.handleButton(interaction, ['start']));
    }
    
    await Promise.allSettled(massiveUserLoad);
    
    const finalMemory = process.memoryUsage();
    console.log('Final memory usage:', finalMemory);
    console.log('Memory growth:', {
        heapUsed: finalMemory.heapUsed - initialMemory.heapUsed,
        external: finalMemory.external - initialMemory.external
    });
}

// Main penetration testing suite
async function runPenetrationTests() {
    console.log('🚨 STARTING COMPREHENSIVE PENETRATION TESTING 🚨');
    console.log('Attempting to break the Discord bot in every possible way...\n');
    
    try {
        await testInputValidation();
        await testConcurrencyAttacks();
        await testGameExploits();
        await testDatabaseIntegrity();
        await testButtonEdgeCases();
        await testAdminSecurity();
        await testResourceExhaustion();
        
        console.log('\n✅ PENETRATION TESTING COMPLETE');
        console.log('Check above for any ⚠️ warnings indicating vulnerabilities');
        
    } catch (error) {
        console.error('\n💥 PENETRATION TESTING FAILED:', error);
        console.error('Stack trace:', error.stack);
    }
}

// Export for external use
if (require.main === module) {
    runPenetrationTests();
}

module.exports = {
    MockInteraction,
    testInputValidation,
    testConcurrencyAttacks,
    testGameExploits,
    testDatabaseIntegrity,
    testButtonEdgeCases,
    testAdminSecurity,
    testResourceExhaustion,
    runPenetrationTests
};